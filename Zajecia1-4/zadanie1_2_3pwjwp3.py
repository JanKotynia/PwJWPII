# -*- coding: utf-8 -*-
"""zadanie1_2_3pwjwp3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1me_GtcXVhPTaACLJMMhoZ05JXqU64JCm
"""

class Asystent:
  def __init__(self,version,nazwa):
    self.version=version
    self.nazwa=nazwa
  def wypisz(self):
    print(f"moja wersja: {self.version}, moja nzawa: {self.nazwa}")

class AnalizaJezykowa:
  def analiza(self,tekst):
    if tekst.strip()[-1] == '?' or tekst.strip()[0:3] == 'Czy':
      return 'pytanie'
    elif tekst.strip()[0:12] == 'Przeanalizuj':
      return 'analiza'
    else:
      return 'inne'

class GeneratorOdpowiedzi:
  def odpowiedz(self,tekst,typ):
    if typ=='pytanie':
      return f"OdpowiedziÄ… na pytanie {tekst} jest: xxx"
    elif typ == 'analiza':
      return f"Przeanalizuje dla ciebie ten temat..."
    else:
      return "Hmmmmmm..."

class InteligentnyAsystent(Asystent, AnalizaJezykowa, GeneratorOdpowiedzi):
  def __init__(self,version,nazwa):
    Asystent.__init__(self,version,nazwa)
    AnalizaJezykowa.__init__(self)
    GeneratorOdpowiedzi.__init__(self)

  def zadaj_pytanie(self,tekst):
    typ=self.analiza(tekst)
    odpowiedz=self.odpowiedz(tekst,typ)
    return odpowiedz

asystent=InteligentnyAsystent(1.0,'Skib')
asystent.wypisz()

asystent.zadaj_pytanie("Przeanalizuj cos")

def average(lista: list[float]) -> int:
  return sum(lista)/len(lista)

average([5.4,6.8,9.8])

class Lib:
  def __init__(self,lista):
    self.lista=lista
  def szukaj(self,isbn: str) -> str:
    try:
      return self.lista[isbn]
    except KeyError:
      return None

biblioteka=Lib({"123" : "ksiazka", "456" : "ksiazka2"})

biblioteka.szukaj("1237")